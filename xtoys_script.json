{
  "initialActions": [
    {
      "type": "updateVariable",
      "value": "-1",
      "variable": "timer0"
    },
    {
      "type": "updateVariable",
      "value": "-1",
      "variable": "timer1"
    },
    {
      "type": "updateVariable",
      "value": "-1",
      "variable": "timer2"
    },
    {
      "type": "updateVariable",
      "value": "-1",
      "variable": "timer3"
    },
    {
      "type": "updateVariable",
      "value": "-1",
      "variable": "timer4"
    },
    {
      "type": "updateVariable",
      "value": "0",
      "variable": "timerAmount0"
    },
    {
      "type": "updateVariable",
      "value": "0",
      "variable": "timerAmount1"
    },
    {
      "type": "updateVariable",
      "value": "0",
      "variable": "timerAmount2"
    },
    {
      "type": "updateVariable",
      "value": "0",
      "variable": "timerAmount3"
    },
    {
      "type": "updateVariable",
      "value": "0",
      "variable": "timerAmount4"
    },
    {
      "type": "updateVariable",
      "value": "-1",
      "variable": "timerID0"
    },
    {
      "type": "updateVariable",
      "value": "-1",
      "variable": "timerID1"
    },
    {
      "type": "updateVariable",
      "value": "-1",
      "variable": "timerID2"
    },
    {
      "type": "updateVariable",
      "value": "-1",
      "variable": "timerID3"
    },
    {
      "type": "updateVariable",
      "value": "-1",
      "variable": "timerID4"
    },
    {
      "type": "updateVariable",
      "value": "0",
      "variable": "activeActivityWeight"
    },
    {
      "type": "updateVariable",
      "value": "0",
      "variable": "outputIntensity"
    },
    {
      "type": "updateVariable",
      "value": "1000",
      "variable": "rampTimeMS"
    },
    {
      "job": "Output",
      "type": "updateJob",
      "action": "start",
      "restart": false
    },
    {
      "type": "updateVariable",
      "value": "[]",
      "variable": "equippedSlots"
    }
  ],
  "finalActions": [],
  "globalTriggers": [
    {
      "type": "componentState",
      "action": "toyEvent",
      "actions": [
        {
          "code": "console.log(assetGroupName + ' with intensity ' + level);\nhandleToyEvent(assetGroupName, level);",
          "type": "customCode",
          "resultVar": "result",
          "variables": [
            {
              "name": "level",
              "value": "trigger-level",
              "expression": null
            },
            {
              "name": "assetGroupName",
              "value": "trigger-assetGroupName",
              "expression": null
            }
          ],
          "storeResult": false
        }
      ],
      "channel": "webhook-a",
      "parsedAction": "toyEvent"
    },
    {
      "type": "componentState",
      "action": "activityEvent",
      "actions": [
        {
          "code": "console.log(actionName + ' on ' + assetGroupName + ' with ' + assetName + ' on self');\nhandleActivityEvent(assetGroupName, actionName, assetName, 'OnSelf');",
          "type": "customCode",
          "resultVar": "result",
          "variables": [
            {
              "name": "assetGroupName",
              "value": "trigger-assetGroupName",
              "expression": null
            },
            {
              "name": "actionName",
              "value": "trigger-actionName",
              "expression": null
            },
            {
              "name": "assetName",
              "value": "trigger-assetName",
              "expression": null
            }
          ]
        }
      ],
      "channel": "webhook-a",
      "parsedAction": "activityEvent"
    },
    {
      "type": "componentState",
      "action": "activityOnOtherEvent",
      "actions": [
        {
          "code": "console.log(actionName + ' on ' + assetGroupName + ' with ' + assetName + ' on other');\nhandleActivityEvent(assetGroupName, actionName, assetName, 'OnOther');",
          "type": "customCode",
          "resultVar": "result",
          "variables": [
            {
              "name": "assetGroupName",
              "value": "trigger-assetGroupName",
              "expression": null
            },
            {
              "name": "assetName",
              "value": "trigger-assetName",
              "expression": null
            },
            {
              "name": "actionName",
              "value": "trigger-actionName",
              "expression": null
            }
          ],
          "storeResult": false
        }
      ],
      "channel": "webhook-a",
      "parsedAction": "activityOnOtherEvent"
    },
    {
      "type": "variableChange",
      "actions": [
        {
          "code": "if (do_json_update == 1) {\r\n    parseVibeConfig();\r\n    parseVibeIntensityConfig();\r\n    parseActivityConfig();\r\n}",
          "type": "customCode",
          "resultVar": "result",
          "variables": [
            {
              "name": "do_json_update",
              "value": "do_json_update",
              "expression": null
            }
          ],
          "storeResult": false
        }
      ],
      "variable": "do_json_update"
    },
    {
      "type": "variableChange",
      "actions": [
        {
          "code": "updateOutput();",
          "type": "customCode",
          "resultVar": "result",
          "storeResult": false
        }
      ],
      "variable": "toyActivityBlend"
    }
  ],
  "jobs": {
    "Output": {
      "steps": {
        "START": {
          "actions": [
            {
              "type": "updateComponent",
              "action": "setVolume",
              "channel": "generic-1-a",
              "rampTime": "{rampTimeMS}/1000",
              "percentVolume": "{outputIntensity}+1",
              "parsedRampTime": 1
            },
            {
              "job": "Output",
              "type": "updateJob",
              "action": "stop"
            }
          ],
          "triggers": []
        }
      }
    },
    "Timer0": {
      "steps": {
        "START": {
          "actions": [],
          "triggers": [
            {
              "type": "timer",
              "amount": "{timer0}/1000",
              "actions": [
                {
                  "code": "stopActivity(getTimerAmount(0),0);",
                  "type": "customCode",
                  "resultVar": "result",
                  "storeResult": false
                }
              ]
            }
          ]
        }
      }
    },
    "Timer1": {
      "steps": {
        "START": {
          "actions": [],
          "triggers": [
            {
              "type": "timer",
              "amount": "{timer1}/1000",
              "actions": [
                {
                  "code": "stopActivity(getTimerAmount(1),1);",
                  "type": "customCode",
                  "resultVar": "result",
                  "storeResult": false
                }
              ]
            }
          ]
        }
      }
    },
    "Timer2": {
      "steps": {
        "START": {
          "actions": [],
          "triggers": [
            {
              "type": "timer",
              "amount": "{timer2}/1000",
              "actions": [
                {
                  "code": "stopActivity(getTimerAmount(2),2);",
                  "type": "customCode",
                  "resultVar": "result",
                  "storeResult": false
                }
              ]
            }
          ]
        }
      }
    },
    "Timer3": {
      "steps": {
        "START": {
          "actions": [],
          "triggers": [
            {
              "type": "timer",
              "amount": "{timer3}/1000",
              "actions": [
                {
                  "code": "stopActivity(getTimerAmount(3),3);",
                  "type": "customCode",
                  "resultVar": "result",
                  "storeResult": false
                }
              ]
            }
          ]
        }
      }
    },
    "Timer4": {
      "steps": {
        "START": {
          "actions": [],
          "triggers": [
            {
              "type": "timer",
              "amount": "{timer4}/1000",
              "actions": [
                {
                  "code": "stopActivity(getTimerAmount(4),4);",
                  "type": "customCode",
                  "resultVar": "result",
                  "storeResult": false
                }
              ],
              "parsedAmount": 9.999
            }
          ]
        }
      }
    }
  },
  "queues": [],
  "channels": {
    "webhook-a": {
      "type": "webhook",
      "outbound": false,
      "hideWebhookInfo": false
    },
    "generic-1-a": {
      "name": null,
      "type": "generic-1"
    }
  },
  "controls": [
    {
      "id": "toyActivityBlend",
      "max": 100,
      "min": 0,
      "name": "Toy-Activity Blend",
      "type": "slider",
      "value": 60,
      "description": "Ratio to mix toy and activity events by. EX: 60 means toy events max out at 60%, with 40% spare for activities"
    },
    {
      "id": "do_json_update",
      "up": "0",
      "down": "1",
      "name": "Update JSON",
      "type": "push",
      "description": "Press when done editing json for the script to register that its been changed"
    },
    {
      "id": "config_vibes",
      "name": "Config Toy Events JSON",
      "type": "textarea",
      "value": "[]",
      "description": "Configuration for what in game toys this script should react to, must be in JSON format. Recommend VSCode or similar to edit."
    },
    {
      "id": "config_vibes_intensity",
      "name": "Config Vibe Intensity JSON",
      "type": "textarea",
      "value": "[0, 0.25, 0.5 , 0.75, 1.0]",
      "description": "Configuration for what percentage intensity this script should use for each in game vibrator level, from 0 to 4. Must be in JSON format. Recommend VSCode or similar to edit."
    },
    {
      "id": "config_activity",
      "name": "Config Actions JSON",
      "type": "textarea",
      "value": "[]",
      "description": "Configuration for what in game actions this script should react to, must be in JSON format. Recommend VSCode or similar to edit."
    }
  ],
  "customFunctions": "var VIBECONFIG = null;\r\nvar ACTIVITY_CONFIG = null;\r\nvar INTENSITIESCONFIG = [0, 0.25, 0.5, 0.75, 1];\r\n\r\nvar vibeWeightSum = 0;\r\nvar activityWeightSum = 0;\r\n\r\n// sum of weights of active vibes\r\nvar activeVibeWeight = 0;\r\n// intensity of all active toys\r\nvar activeToys = [];\r\n\r\n\r\nvar loggingEnabled = true;\r\nfunction log(x) { if (loggingEnabled) { console.log(x); } }\r\n\r\n\r\nfunction arrayMax(arr) {\r\n  var len = arr.length, max = -Infinity;\r\n  while (len--) {\r\n    if (arr[len] > max) {\r\n      max = arr[len];\r\n    }\r\n  }\r\n  return max;\r\n}\r\n\r\nfunction readUserJSON(configVar) {\r\n    var configTmp = null;\r\n    \r\n    try {\r\n        configTmp = JSON.parse(getVariable(configVar));\r\n    }\r\n    catch (err) {\r\n        console.log(err.message);\r\n        return null;\r\n    }\r\n    \r\n    if (Array.isArray(configTmp)) {\r\n        log(configTmp);\r\n        return configTmp;\r\n    }\r\n    return null;\r\n}\r\n\r\nfunction jsonHasAllProperties(j, propertiesArr) {\r\n    for (var i = 0; i < propertiesArr.length; i++) {\r\n        if (!j.hasOwnProperty(propertiesArr[i])) { return false; }\r\n    }\r\n    return true;\r\n}\r\n\r\n// adds or removes toy in given slot, if adding, add == true\r\nfunction addRemoveToy(slot, add) {\r\n    var equippedSlots = getVariable('equippedSlots');\r\n    \r\n}\r\n\r\nfunction parseVibeIntensityConfig() {\r\n    var configTmp = readUserJSON('config_vibes_intensity');\r\n    var err = 'Invalid vibe intensity config, must be an array of 5 positive integers';\r\n    if (configTmp == null || configTmp.length != 5) { \r\n        console.log(err);\r\n        return; \r\n    }\r\n    \r\n    var max = arrayMax(configTmp);\r\n    for (var i = 0; i < configTmp.length; i++) {\r\n        if (configTmp[i] < 0) { \r\n            console.log(err);\r\n            return; \r\n        }\r\n        configTmp[i] /= max;\r\n    }\r\n    \r\n    INTENSITIESCONFIG = configTmp;\r\n}\r\n\r\nfunction parseVibeConfig() {\r\n    var configTmp = readUserJSON('config_vibes');\r\n    if (configTmp == null) { return; }\r\n    \r\n    \r\n    var vibeWeightSumTmp = 0;\r\n    var activeToysTmp = new Array(configTmp.length);\r\n    \r\n    for (var i = 0; i < configTmp.length; i++) {\r\n        if (!jsonHasAllProperties(configTmp[i],['Name','Weight','RampTimeMS'])) { \r\n            console.log('Vibe Config JSON elements dont all contain required properties: Name, Weight, RampTimeMS');\r\n            return; \r\n        }\r\n        \r\n        if (typeof configTmp[i].Name != 'string' || typeof configTmp[i].Weight != 'number' || configTmp[i].Weight < 0 || typeof configTmp[i].RampTimeMS != 'number' || configTmp[i].RampTimeMS < 0) {\r\n            console.log('Vibe Config JSON properties of invalid type');\r\n            return;\r\n        }\r\n        \r\n        vibeWeightSumTmp += configTmp[i].Weight;\r\n        activeToysTmp[i] = 0;\r\n    }\r\n    \r\n    VIBECONFIG = configTmp;\r\n    vibeWeightSum = vibeWeightSumTmp;\r\n    activeToys = activeToysTmp;\r\n}\r\n\r\nfunction isArrayOfType(a, type) {\r\n    if (!Array.isArray(a)) { return false; }\r\n    for (var i = 0; i < a.length; i++) {\r\n        if (typeof a[i] != type) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}\r\n\r\nfunction parseActivityConfig() {\r\n    var configTmp = readUserJSON('config_activity');\r\n    if (configTmp == null) { return; }\r\n\r\n    activityWeightSum = 0;\r\n    for (var i = 0; i < configTmp.length; i++) {\r\n        if (!jsonHasAllProperties(configTmp[i],['Type', 'Weight', 'DurationMS', 'RampTimeMS', 'Names', 'Actions', 'Items'])) { \r\n            console.log('Activity Config JSON elements dont all contain required properties: Type, Weight, DurationMS, RampTimeMS, Names, Actions, Items. Item #' + i);\r\n            return; \r\n        }\r\n        \r\n        var invalidPropertiesErr = 'Activity Config JSON properties of invalid type. Item #';\r\n        if (typeof configTmp[i].Type != 'string' || typeof configTmp[i].Weight != 'number' || typeof configTmp[i].DurationMS != 'number' || configTmp[i].DurationMS < 0 || typeof configTmp[i].RampTimeMS != 'number' || configTmp[i].RampTimeMS < 0) {\r\n            console.log(invalidPropertiesErr + i);\r\n            return;\r\n        }\r\n        if (!isArrayOfType(configTmp[i].Names, 'string') || !isArrayOfType(configTmp[i].Actions, 'string') || !isArrayOfType(configTmp[i].Items, 'string')) {\r\n            console.log(invalidPropertiesErr + i);\r\n            return;\r\n        }\r\n        if (!(configTmp[i].Type == 'OnSelf' || configTmp[i].Type == 'OnOther')) {\r\n            console.log('Type must be \"OnSelf\" or \"OnOther\" for item ' + i + '.');\r\n            return;\r\n        }\r\n        \r\n        activityWeightSum = Math.max(configTmp[i].Weight, activityWeightSum);\r\n    }\r\n   \r\n    ACTIVITY_CONFIG = configTmp;\r\n}\r\n\r\nfunction updateOutput() {\r\n    var outputIntensity = 0;\r\n    \r\n    var toyActivityBlendPercent = getVariable('toyActivityBlend') / 100; \r\n    \r\n    var toyPercent = activeVibeWeight / vibeWeightSum;\r\n    var actionPercent = getVariable('activeActivityWeight') / activityWeightSum;\r\n    \r\n    outputIntensity = (Math.max(toyPercent, actionPercent) * toyActivityBlendPercent) + (actionPercent * (1 - toyActivityBlendPercent));\r\n    outputIntensity = Math.min(outputIntensity, 1);\r\n    \r\n    log(\"Output: \" + toyPercent + \" & \" + actionPercent + ' => ' + outputIntensity + '   Blend: ' + toyActivityBlendPercent);\r\n    \r\n    setVariable('outputIntensity', outputIntensity * 100);\r\n    callAction({\r\n        \"type\": \"updateJob\",\r\n        \"job\": \"Output\",\r\n        \"action\": \"start\"\r\n    });\r\n}\r\n\r\n// total output = sum of all occuring events / (vibeWeightSum + activityWeightSum)\r\n// all actions can only be counted once, if triggered while active, restart countdown\r\n\r\nfunction handleToyEvent(assetGroupName, level) {\r\n    if (level < 0 || level > 4 || VIBECONFIG == null) { return; }\r\n\r\n    activeVibeWeight = 0;\r\n    for (var i = 0; i < VIBECONFIG.length; i++) {\r\n        if (VIBECONFIG[i].Name == assetGroupName) {\r\n            activeToys[i] = INTENSITIESCONFIG[level];\r\n        }\r\n        setVariable('rampTimeMS', VIBECONFIG[i].RampTimeMS);\r\n        activeVibeWeight += VIBECONFIG[i].Weight * activeToys[i];\r\n    }\r\n    log('Updated toy weight to ' + activeVibeWeight);\r\n    updateOutput();\r\n}\r\n\r\n// allows wildcards\r\nfunction activityMatches(arr, matchStr) {\r\n    for (var i = 0; i < arr.length; i++) {\r\n        if (arr[i] == '*' || arr[i] == matchStr) {\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}\r\n\r\nfunction handleActivityEvent(assetGroupName, actionName, assetName, target) {\r\n    // find first relevant action in config\r\n    for (var i = 0; i < ACTIVITY_CONFIG.length; i++) {\r\n        if (!activityMatches(ACTIVITY_CONFIG[i].Names, assetGroupName) || !activityMatches(ACTIVITY_CONFIG[i].Actions, actionName)  || !activityMatches(ACTIVITY_CONFIG[i].Items, assetName)) {\r\n            continue;\r\n        }\r\n        \r\n        if (ACTIVITY_CONFIG[i].Type != target) {\r\n            continue;\r\n        }\r\n       \r\n        log('Updating ' + actionName + ' on ' + assetGroupName + ' with ' + assetName);\r\n        \r\n        // handle timers\r\n        var existingTimerID = getTimerIDByAssetGroupName(assetGroupName);\r\n        var existingAmount = getTimerAmount(existingTimerID);\r\n        var newAmount = ACTIVITY_CONFIG[i].Weight;\r\n       \r\n        if (existingTimerID == null) {\r\n            increaseActivityForSetTime(ACTIVITY_CONFIG[i].DurationMS, newAmount, assetGroupName);\r\n        } else if (existingAmount < newAmount) {\r\n            increaseActivityForSetTime(ACTIVITY_CONFIG[i].DurationMS, newAmount - existingAmount, assetGroupName);\r\n        } else {\r\n            stopActivity(existingAmount, existingTimerID);\r\n            increaseActivityForSetTime(ACTIVITY_CONFIG[i].DurationMS, newAmount, assetGroupName);\r\n        }\r\n        \r\n        // output\r\n        setVariable('rampTimeMS', ACTIVITY_CONFIG[i].RampTimeMS);\r\n        updateOutput();\r\n        return;\r\n    }\r\n    log('No matching activity found');\r\n}\r\n\r\n\r\nfunction increaseActiveActivityWeight(amount) {\r\n    setVariable('activeActivityWeight', getVariable('activeActivityWeight') + amount);\r\n}\r\n\r\nfunction setTimerData(timerID, time, amount, assetGroupName) {\r\n    setVariable('timer' + timerID, time);\r\n    setVariable('timerAmount' + timerID, amount);\r\n    setVariable('timerID' + timerID, assetGroupName);\r\n}\r\n\r\nfunction getTimerTime(timerID) {\r\n    return getVariable('timer' + timerID);\r\n}\r\n\r\nfunction getTimerAmount(timerID) {\r\n    return getVariable('timerAmount' + timerID);\r\n}\r\n\r\nfunction getTimerAssetGroupName(timerID) {\r\n    return getVariable('timerID' + timerID);\r\n}\r\n\r\nfunction getTimerIDByAssetGroupName(assetGroupName) {\r\n    for (var i = 0; i < 5; i++) {\r\n        if (getTimerAssetGroupName(i) == assetGroupName) {\r\n            return i;\r\n        }\r\n    }\r\n    return null;\r\n}\r\n\r\nfunction increaseActivityForSetTime(time, amount, assetGroupName) {\r\n    for (var i = 1; i <= 5; i++) {\r\n        if (getTimerTime(i) < 0) {\r\n            log('Setting timer on ' + i + ' for time: ' + time + ' with amount: ' + amount + ' for id: ' + assetGroupName);\r\n            increaseActiveActivityWeight(amount);\r\n            setTimerData(i, time, amount, assetGroupName);\r\n            callAction({\r\n                \"type\": \"updateJob\",\r\n                \"job\": \"Timer\" + i,\r\n                \"action\": \"start\"\r\n            });\r\n            log('Started action with ' + getVariable('activeActivityWeight'));\r\n            return;\r\n        }\r\n    }\r\n    log(\"Skipped Activity, too many concurrent\");\r\n}\r\n\r\nfunction stopActivity(amount, id) {\r\n    log('StopActivity: id:' + id + ', amount: ' + amount);\r\n    setTimerData(id, -1, 0, 'null');\r\n    increaseActiveActivityWeight(-1 * amount);\r\n    callAction({\r\n        \"type\": \"updateJob\",\r\n        \"job\": \"Timer\" + id,\r\n        \"action\": \"stop\"\r\n    });\r\n    updateOutput();\r\n}\r\n\r\nparseVibeConfig();\r\nparseVibeIntensityConfig();\r\nparseActivityConfig();\r\n"
}